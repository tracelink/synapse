/*
 * Veracode Applications API Specification
 * Veracode Applications API Documentation  Use one of the following base URLs depending on the region for your account: * https://api.veracode.com/ - Veracode US Region (default) * https://api.veracode.eu/ - Veracode European Region * https://api.veracode.us/ - Veracode US Federal Region
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.tracelink.prodsec.lib.veracode.api.rest.model;

import java.io.IOException;
import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Reference to the latest scan of this application.
 */
@ApiModel(description = "Reference to the latest scan of this application.")
public class ApplicationScan {
	@SerializedName("internal_status")
	private String internalStatus = null;

	@SerializedName("modified_date")
	private String modifiedDate = null;

	/**
	 * Type of scan in which this finding was discovered.
	 */
	@JsonAdapter(ScanTypeEnum.Adapter.class)
	public enum ScanTypeEnum {
		STATIC("STATIC"),

		DYNAMIC("DYNAMIC"),

		MANUAL("MANUAL"),

		SCA("SCA");

		private String value;

		ScanTypeEnum(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		/**
		 * Convert text to ScanTypeEnum
		 * 
		 * @param text the text to convert
		 * @return ScanTypeEnum or null
		 */
		public static ScanTypeEnum fromValue(String text) {
			for (ScanTypeEnum b : ScanTypeEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		/**
		 * Adapter to translate JSON to ScanTypeEnum
		 */
		public static class Adapter extends TypeAdapter<ScanTypeEnum> {
			@Override
			public void write(final JsonWriter jsonWriter, final ScanTypeEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public ScanTypeEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return ScanTypeEnum.fromValue(String.valueOf(value));
			}
		}
	}

	@SerializedName("scan_type")
	private ScanTypeEnum scanType = null;

	@SerializedName("scan_url")
	private String scanUrl = null;

	/**
	 * Scan status
	 */
	@JsonAdapter(StatusEnum.Adapter.class)
	public enum StatusEnum {
		CREATED("CREATED"),

		UNPUBLISHED("UNPUBLISHED"),

		DELETED("DELETED"),

		PARTIAL_PUBLISH("PARTIAL_PUBLISH"),

		PARTIAL_UNPUBLISH("PARTIAL_UNPUBLISH"),

		INCOMPLETE("INCOMPLETE"),

		SCAN_SUBMITTED("SCAN_SUBMITTED"),

		IN_QUEUE("IN_QUEUE"),

		STOPPING("STOPPING"),

		PAUSING("PAUSING"),

		IN_PROGRESS("IN_PROGRESS"),

		ANALYSIS_ERRORS("ANALYSIS_ERRORS"),

		SCAN_CANCELED("SCAN_CANCELED"),

		INTERNAL_REVIEW("INTERNAL_REVIEW"),

		VERIFYING_RESULTS("VERIFYING_RESULTS"),

		SUBMITTED_FOR_NTO_PRE_SCAN("SUBMITTED_FOR_NTO_PRE_SCAN"),

		SUBMITTED_FOR_DYNAMIC_PRE_SCAN("SUBMITTED_FOR_DYNAMIC_PRE_SCAN"),

		PRE_SCAN_FAILED("PRE_SCAN_FAILED"),

		READY_TO_SUBMIT("READY_TO_SUBMIT"),

		NTO_PENDING_SUBMISSION("NTO_PENDING_SUBMISSION"),

		PRE_SCAN_COMPLETE("PRE_SCAN_COMPLETE"),

		MODULE_SELECTION_REQUIRED("MODULE_SELECTION_REQUIRED"),

		PENDING_VENDOR_ACCEPTANCE("PENDING_VENDOR_ACCEPTANCE"),

		SHOW_OSRDB("SHOW_OSRDB"),

		PUBLISHED("PUBLISHED"),

		PUBLISHED_TO_VENDOR("PUBLISHED_TO_VENDOR"),

		PUBLISHED_TO_ENTERPRISE("PUBLISHED_TO_ENTERPRISE"),

		PENDING_ACCOUNT_APPROVAL("PENDING_ACCOUNT_APPROVAL"),

		PENDING_LEGAL_AGREEMENT("PENDING_LEGAL_AGREEMENT"),

		SCAN_IN_PROGRESS("SCAN_IN_PROGRESS"),

		SCAN_IN_PROGRESS_PARTIAL_RESULTS_READY("SCAN_IN_PROGRESS_PARTIAL_RESULTS_READY"),

		PROMOTE_IN_PROGRESS("PROMOTE_IN_PROGRESS"),

		PRE_SCAN_CANCELED("PRE_SCAN_CANCELED"),

		NTO_PRE_SCAN_CANCELED("NTO_PRE_SCAN_CANCELED"),

		SCAN_HELD_APPROVAL("SCAN_HELD_APPROVAL"),

		SCAN_HELD_LOGIN_INSTRUCTIONS("SCAN_HELD_LOGIN_INSTRUCTIONS"),

		SCAN_HELD_LOGIN("SCAN_HELD_LOGIN"),

		SCAN_HELD_INSTRUCTIONS("SCAN_HELD_INSTRUCTIONS"),

		SCAN_HELD_HOLDS_FINISHED("SCAN_HELD_HOLDS_FINISHED"),

		SCAN_REQUESTED("SCAN_REQUESTED"),

		TIMEFRAMEPENDING_ID("TIMEFRAMEPENDING_ID"),

		PAUSED_ID("PAUSED_ID"),

		STATIC_VALIDATING_UPLOAD("STATIC_VALIDATING_UPLOAD"),

		PUBLISHED_TO_ENTERPRISEINT("PUBLISHED_TO_ENTERPRISEINT");

		private String value;

		StatusEnum(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		/**
		 * Convert text to StatusEnum
		 * 
		 * @param text the text to convert
		 * @return StatusEnum or null
		 */
		public static StatusEnum fromValue(String text) {
			for (StatusEnum b : StatusEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		/**
		 * Adapter to translate JSON to StatusEnum
		 */
		public static class Adapter extends TypeAdapter<StatusEnum> {
			@Override
			public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public StatusEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return StatusEnum.fromValue(String.valueOf(value));
			}
		}
	}

	@SerializedName("status")
	private StatusEnum status = null;

	/**
	 * Get internalStatus
	 * 
	 * @return internalStatus
	 **/
	@ApiModelProperty(value = "")
	public String getInternalStatus() {
		return internalStatus;
	}

	public void setInternalStatus(String internalStatus) {
		this.internalStatus = internalStatus;
	}

	/**
	 * The date when the scan results were published. The date/time format is per
	 * RFC3339 and ISO-8601, and the timezone is UTC. Example:
	 * 2019-04-12T23:20:50.52Z.
	 * 
	 * @return modifiedDate
	 **/
	@ApiModelProperty(value = "The date when the scan results were published. The date/time format is per RFC3339 and ISO-8601, and the timezone is UTC. Example: 2019-04-12T23:20:50.52Z.")
	public String getModifiedDate() {
		return modifiedDate;
	}

	/**
	 * Type of scan in which this finding was discovered.
	 * 
	 * @return scanType
	 **/
	@ApiModelProperty(value = "Type of scan in which this finding was discovered.")
	public ScanTypeEnum getScanType() {
		return scanType;
	}

	/**
	 * Unique path to the latest scan.
	 * 
	 * @return scanUrl
	 **/
	@ApiModelProperty(value = "Unique path to the latest scan.")
	public String getScanUrl() {
		return scanUrl;
	}

	/**
	 * Scan status
	 * 
	 * @return status
	 **/
	@ApiModelProperty(value = "Scan status")
	public StatusEnum getStatus() {
		return status;
	}

	public void setStatus(StatusEnum status) {
		this.status = status;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		ApplicationScan applicationScan = (ApplicationScan) o;
		return Objects.equals(this.internalStatus, applicationScan.internalStatus)
				&& Objects.equals(this.modifiedDate, applicationScan.modifiedDate)
				&& Objects.equals(this.scanType, applicationScan.scanType)
				&& Objects.equals(this.scanUrl, applicationScan.scanUrl)
				&& Objects.equals(this.status, applicationScan.status);
	}

	@Override
	public int hashCode() {
		return Objects.hash(internalStatus, modifiedDate, scanType, scanUrl, status);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class ApplicationScan {\n");

		sb.append("    internalStatus: ").append(toIndentedString(internalStatus)).append("\n");
		sb.append("    modifiedDate: ").append(toIndentedString(modifiedDate)).append("\n");
		sb.append("    scanType: ").append(toIndentedString(scanType)).append("\n");
		sb.append("    scanUrl: ").append(toIndentedString(scanUrl)).append("\n");
		sb.append("    status: ").append(toIndentedString(status)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

}
